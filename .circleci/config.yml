version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install and run frontend build
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Enter Install npm and build backend
          command: |
            cd backend
            npm install
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test frontend
          command: |
            cd backend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyze frontend code
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyze backend code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install gzip and tar packages
          command: |
            yum install -y tar
            yum install -y gzip

      - run:
          name: Create backend IaC
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - run:
          name: Create frontend IaC
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - run:
          name: Update Inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory

      - run:
          name: Confirm Inventory is Updated
          command: |
            cat .circleci/ansible/inventory

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ff:fd:f3:67:a1:d3:3c:8f:d6:5b:9e:c5:3a:8e:f1:b1"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook ansible/main-remote.yml

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - test-frontend
      - scan-backend:
          requires:
            - test-backend
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure